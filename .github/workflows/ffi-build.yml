name: Direct FFI Build

on:
  pull_request:
    branches:
      - main
    paths:
      - 'idb_direct/**'
      - 'rust-client-simple/**'
      - '.github/workflows/ffi-build.yml'
      - 'build_idb_direct.sh'
  push:
    branches:
      - main
    paths:
      - 'idb_direct/**'
      - 'rust-client-simple/**'
      - '.github/workflows/ffi-build.yml'
      - 'build_idb_direct.sh'

jobs:
  build-ffi:
    name: Build Direct FFI Integration
    strategy:
      matrix:
        os: [macos-latest]
        configuration: [Debug, Release]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rust-client-simple/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Get framework cache key
      id: framework-cache-key
      run: |
        # Create a hash of files that affect framework builds
        echo "hash=$(cat FBSimulatorControl.xcodeproj/project.pbxproj Podfile.lock 2>/dev/null | shasum -a 256 | cut -d' ' -f1)" >> $GITHUB_OUTPUT
        
    - name: Cache frameworks
      uses: actions/cache@v4
      with:
        path: build/Build/Products/Debug
        key: ${{ runner.os }}-frameworks-${{ steps.framework-cache-key.outputs.hash }}
        restore-keys: |
          ${{ runner.os }}-frameworks-
          
    - name: Build frameworks
      run: |
        if [ ! -d "build/Build/Products/Debug/FBControlCore.framework" ]; then
          echo "Building frameworks..."
          ./build.sh framework build
        else
          echo "Using cached frameworks"
        fi
        
    - name: Build idb_direct static library
      run: |
        echo "Building idb_direct static library..."
        ./build_idb_direct.sh
        
    - name: Build Direct FFI library
      run: |
        cd rust-client-simple
        if [ "${{ matrix.configuration }}" = "Debug" ]; then
          cargo build --features ffi --bin idb-tap-ffi
        else
          cargo build --features ffi --bin idb-tap-ffi --release
        fi
        
    - name: Test C API directly
      run: |
        echo "Testing idb_direct C API..."
        ./build_and_test_idb_direct.sh --ci
        
    - name: Test FFI integration
      run: |
        cd rust-client-simple
        # Run the FFI binary in test mode (just initialization)
        if [ "${{ matrix.configuration }}" = "Debug" ]; then
          ./target/debug/idb-tap-ffi --help || true
        else
          ./target/release/idb-tap-ffi --help || true
        fi
        
    - name: Package FFI artifacts
      run: |
        mkdir -p dist/ffi
        if [ "${{ matrix.configuration }}" = "Debug" ]; then
          cp rust-client-simple/target/debug/idb-tap-ffi dist/ffi/
        else
          cp rust-client-simple/target/release/idb-tap-ffi dist/ffi/
        fi
        cp idb_direct/idb_direct.h dist/ffi/
        cp build/lib/libidb_direct.a dist/ffi/
        tar -czf direct-ffi-${{ matrix.os }}-${{ matrix.configuration }}-${{ github.sha }}.tar.gz -C dist ffi
        
    - name: Upload FFI artifacts
      uses: actions/upload-artifact@v4
      with:
        name: direct-ffi-${{ matrix.os }}-${{ matrix.configuration }}
        path: direct-ffi-${{ matrix.os }}-${{ matrix.configuration }}-${{ github.sha }}.tar.gz
        retention-days: 7