name: Release idb_companion

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release (e.g., 1.1.7-arkavo.1)'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Install dependencies
      run: |
        brew install protobuf
        
    - name: Create build directory
      run: mkdir -p dist

    - name: Build idb_companion with frameworks
      run: |
        # Build for ARM64 only
        export ARCHS=arm64
        export ONLY_ACTIVE_ARCH=NO
        export VALID_ARCHS=arm64
        ./idb_build.sh idb_companion build ./dist
        
    - name: Verify build output
      run: |
        echo "=== Build output structure ==="
        ls -la dist/
        ls -la dist/bin/ || true
        ls -la dist/Frameworks/ || true
        
    - name: Fix framework rpaths
      run: |
        # Fix rpaths to load frameworks from relative path
        cd dist/bin
        for framework in ../Frameworks/*.framework; do
          framework_name=$(basename "$framework" .framework)
          install_name_tool -change \
            "@rpath/${framework_name}.framework/Versions/A/${framework_name}" \
            "@loader_path/../Frameworks/${framework_name}.framework/Versions/A/${framework_name}" \
            idb_companion || true
        done
        
        # Add rpath for frameworks directory
        install_name_tool -add_rpath "@loader_path/../Frameworks" idb_companion || true
        
        # Verify dependencies
        echo "=== Dependencies check ==="
        otool -L idb_companion
        
    - name: Decode and import signing certificate
      run: |
        echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > /tmp/certificate.p12
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security import /tmp/certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        
    - name: Codesign frameworks and binary
      run: |
        # Sign frameworks first with Developer ID
        for framework in dist/Frameworks/*.framework; do
          codesign --force --deep --sign "Developer ID Application: Arkavo LLC (M8GS7ZT95Y)" --timestamp "$framework"
        done
        
        # Sign the binary with hardened runtime for notarization
        codesign --force --sign "Developer ID Application: Arkavo LLC (M8GS7ZT95Y)" --timestamp --options runtime dist/bin/idb_companion
        
        # Verify signatures
        echo "=== Verifying signatures ==="
        for framework in dist/Frameworks/*.framework; do
          codesign --verify --verbose "$framework"
        done
        codesign --verify --verbose dist/bin/idb_companion
        
    - name: Create ZIP for notarization
      run: |
        cd dist
        zip -r idb_companion.zip bin Frameworks
        
    - name: Notarize bundle
      run: |
        cd dist
        xcrun notarytool submit idb_companion.zip \
          --apple-id ${{ secrets.APPLE_ID }} \
          --password ${{ secrets.APPLE_APP_PASSWORD }} \
          --team-id M8GS7ZT95Y \
          --wait \
          --timeout 600 || {
            echo "Notarization failed. Please check Apple Developer account status and credentials."
            exit 1
          }
          
    - name: Staple notarization
      run: |
        cd dist
        # Extract the zip to staple
        unzip -o idb_companion.zip
        
        # Staple the binary
        xcrun stapler staple bin/idb_companion || echo "Note: Stapling may fail but notarization is complete"
        
        # Clean up the zip
        rm idb_companion.zip
        
    - name: Validate notarization
      run: |
        cd dist
        # Check that the binary is notarized (may fail in CI but binary is notarized)
        spctl -a -v bin/idb_companion || echo "Note: spctl may fail in CI but the binary is notarized"
        
    - name: Create release archive
      run: |
        cd dist
        # Get version from tag or input
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.tag_name }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        
        ARCHIVE_NAME="idb_companion-${VERSION}-macos-$(uname -m).tar.gz"
        tar -czf "../${ARCHIVE_NAME}" bin Frameworks
        
        # Create checksum
        cd ..
        shasum -a 256 "${ARCHIVE_NAME}" > "${ARCHIVE_NAME}.sha256"
        
        echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name || github.ref_name }}
        name: idb_companion ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name || github.ref_name }}
        body: |
          ## idb_companion Release for arkavo-edge
          
          This release includes:
          - `idb_companion` binary
          - All required frameworks bundled
          - Self-contained deployment (no system installation required)
          
          ### Installation
          
          ```bash
          # Download and extract
          tar -xzf ${{ env.ARCHIVE_NAME }}
          
          # The binary is in bin/idb_companion
          # Frameworks are in Frameworks/
          ```
          
          ### Usage with arkavo-edge
          
          This build is optimized for use with [arkavo-edge](https://github.com/arkavo-org/arkavo-edge).
          
          ### Checksums
          
          See `${{ env.ARCHIVE_NAME }}.sha256` for verification.
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') || contains(github.event.inputs.tag_name, '-') }}
        files: |
          ${{ env.ARCHIVE_NAME }}
          ${{ env.ARCHIVE_NAME }}.sha256